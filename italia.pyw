# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Παραγγελίες Ιταλία.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
V 0.4 add spare part and add model ready
V 0.3 Orders can be deleted and save
"""
import sys
from info_scrap import get_info_price
from ital_scrap import get_ital_price
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox, QProgressBar, QStatusBar, QHeaderView, QCompleter,  QWidget
from sql import get_spare_parts, save_prices,  save_to_basket, get_basket, save_basket, get_prices_date,\
    save_order, get_orders_dates, get_history, make_changed_order, get_machines_id, Ital_Session, Machine
import ml_sql
from settings import root_logger, version
from add_spare_part import Ui_add_spare_part_QWidget
from add_mdel import Ui_add_model_QWidget
import traceback

sys.stderr.write = root_logger.error
sys.stdout.write = root_logger.info

f = QtGui.QFont("Helvetica", 9)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 702)
        MainWindow.setWindowTitle(f"Παραγγελίες Ιταλία {version}")
        MainWindow.setToolTip("")
        MainWindow.setStatusTip("")
        MainWindow.setWhatsThis("")
        MainWindow.setAccessibleName("")
        MainWindow.setAccessibleDescription("")
        MainWindow.setAutoFillBackground(False)
        MainWindow.setLocale(QtCore.QLocale(QtCore.QLocale.Greek, QtCore.QLocale.Greece))
        MainWindow.setWindowFilePath("")
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(80)

        self.selected_date_to_show = None
        self.part_description = []
        self.selected_tableWidget = None
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideLeft)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        # self.tabWidget.setStyleSheet(QTabBar("tab:left:selected {  border-left-color: none;}"))

        # KONICA MINOLTA TAB
        self.konica_tab = QtWidgets.QWidget()
        self.konica_tab.setObjectName("konica_tab")
        self.gridLayout = QtWidgets.QGridLayout(self.konica_tab)
        self.gridLayout.setObjectName("gridLayout")

        self.konica_machines_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_machines_btn.setText("Μηχανήματα")
        self.konica_machines_btn.setStyleSheet("background-color: gray; color: white; max-height: 40px; "
                                                "border-top-right-radius: 20px; border-bottom-left-radius: 20px;")
        self.konica_machines_btn.setObjectName("konica_add_product_btn")
        self.konica_machines_btn.clicked.connect(self.update_machines)
        self.gridLayout.addWidget(self.konica_machines_btn, 0, 0, 1, 1)

        # Machine ComboBox
        self.machine_comboBox = QtWidgets.QComboBox(self.konica_tab)
        self.machine_comboBox.setStyleSheet("font: 9pt;")
        self.machine_comboBox.setObjectName("machine_comboBox")
        self.machine_comboBox.addItems(get_machines_id())
        self.machine_comboBox.activated[str].connect(self.show_parts)
        self.gridLayout.addWidget(self.machine_comboBox, 1, 0, 1, 1)

        # self.bzh215_btn = QtWidgets.QPushButton(self.konica_tab)
        # # self.bzh215_btn.setMaximumSize(QtCore.QSize(100, 16777215))
        # self.bzh215_btn.setObjectName("bzh215_btn")
        # self.bzh215_btn.clicked.connect(lambda: self.show_parts(tableWidget=self.konica_tableWidget, machine_id=2))
        # self.gridLayout.addWidget(self.bzh215_btn, 2, 0, 1, 1)

        # KONICA TableWidget
        self.konica_tableWidget = QtWidgets.QTableWidget(self.konica_tab)
        self.konica_tableWidget.setToolTip("")
        self.konica_tableWidget.setStatusTip("")
        self.konica_tableWidget.setWhatsThis("")
        self.konica_tableWidget.setAccessibleName("")
        self.konica_tableWidget.setAccessibleDescription("")
        self.konica_tableWidget.setAutoFillBackground(True)
        self.konica_tableWidget.setLocale(QtCore.QLocale(QtCore.QLocale.Greek, QtCore.QLocale.Greece))
        self.konica_tableWidget.setAlternatingRowColors(True)
        self.konica_tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.konica_tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.konica_tableWidget.setObjectName("konica_tableWidget")
        self.konica_tableWidget.setColumnCount(11)
        self.konica_tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.konica_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.konica_tableWidget.resizeRowsToContents()

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("ID")
        self.konica_tableWidget.setHorizontalHeaderItem(0, item)

        item = QtWidgets.QTableWidgetItem()
        item.setText("Part Nr.")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setText("Κωδικός")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        item.setText("Info-Site-Κωδικός")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        item.setText("Τεμ.")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(80)
        item.setFont(font)
        self.konica_tableWidget.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(5, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(6, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(6, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(7, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(7, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(8, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(8, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(9, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(9, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(10, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(10, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(11, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(11, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(12, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.konica_tableWidget.setItem(12, 1, item)

        self.gridLayout.addWidget(self.konica_tableWidget, 1, 2, 6, 5)
        self.konica_italia_price_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_italia_price_btn.setStyleSheet(
            "color: rgb(255, 255, 255); min-height: 40px; background-color: rgb(0, 0, 255);\n")
        self.konica_italia_price_btn.setObjectName("konica_italia_price_btn")
        self.konica_italia_price_btn.clicked.connect(lambda: self.update_ital_prices())
        self.gridLayout.addWidget(self.konica_italia_price_btn, 0, 4, 1, 1)
        self.konica_add_product_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_add_product_btn.setStyleSheet("background-color: rgb(255, 170, 0);\n"
                                                  "color: rgb(8, 8, 8);")
        self.konica_add_product_btn.setObjectName("konica_add_product_btn")
        self.konica_add_product_btn.clicked.connect(self.insert_spare_part)
        self.gridLayout.addWidget(self.konica_add_product_btn, 7, 2, 1, 1)
        # ProgressBar
        self.progressBar = QProgressBar(self.konica_tab)
        self.progressBar.setObjectName(u"progressBar")
        self.progressBar.setMinimum(0)
        self.progressBar.hide()

        # self.bzh361_btn = QtWidgets.QPushButton(self.konica_tab)
        # # self.bzh361_btn.setMaximumSize(QtCore.QSize(100, 16777215))
        # self.bzh361_btn.setObjectName("bzh361_btn")
        # self.bzh361_btn.clicked.connect(lambda: self.show_parts(tableWidget=self.konica_tableWidget, machine_id=5))
        # self.gridLayout.addWidget(self.bzh361_btn, 5, 0, 1, 1)
        # Konica Model Label
        self.konica_model_label = QtWidgets.QLabel(self.konica_tab)
        self.konica_model_label.setMaximumSize(QtCore.QSize(350, 16777215))
        self.konica_model_label.setFont(font)
        self.konica_model_label.setAlignment(Qt.AlignCenter)
        self.konica_model_label.setStyleSheet("background-color: gray; max-height: 40px; border-top-right-radius: 20px; \
                        border-bottom-left-radius: 20px; background-color: #ff9800;  max-width: 200px ;min-width: 200px")

        self.gridLayout.addWidget(self.konica_model_label, 0, 3, 1, 1)

        # self.bzh210_btn = QtWidgets.QPushButton(self.konica_tab)
        # # self.bzh210_btn.setMaximumSize(QtCore.QSize(100, 16777215))
        # self.bzh210_btn.setObjectName("bzh210_btn")
        # self.bzh210_btn.clicked.connect(lambda: self.show_parts(tableWidget=self.konica_tableWidget, machine_id=1))
        # self.gridLayout.addWidget(self.bzh210_btn, 1, 0, 1, 1)

        self.konica_info_price_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_info_price_btn.setStyleSheet("background-color: rgb(170, 255, 0); min-height: 40px; "
                                                 "color: rgb(15, 15, 15);\n")
        self.konica_info_price_btn.setObjectName("konica_info_price_btn")
        self.konica_info_price_btn.clicked.connect(lambda: self.update_info_prices())

        self.konica_update_total_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_update_total_btn.setText("Υπολογισμός \n Συνόλου")
        self.konica_update_total_btn.clicked.connect(lambda: self.calc_total())
        self.gridLayout.addWidget(self.konica_update_total_btn, 0, 6, 1, 1)

        self.gridLayout.addWidget(self.konica_info_price_btn, 0, 5, 1, 1)
        self.konica_sent_to_basket_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_sent_to_basket_btn.setStyleSheet("background-color: rgb(0, 170, 0);\n"
                                                     "color: rgb(255, 255, 255);")
        self.konica_sent_to_basket_btn.setObjectName("konica_sent_to_basket_btn")
        self.konica_sent_to_basket_btn.clicked.connect(lambda: self.send_to_basket())

        self.gridLayout.addWidget(self.konica_sent_to_basket_btn, 7, 6, 1, 1)
        self.konica_save_changes_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_save_changes_btn.setStyleSheet("background-color: rgb(85, 0, 127);")
        self.konica_save_changes_btn.setObjectName("konica_save_changes_btn")
        self.konica_save_changes_btn.clicked.connect(lambda: self.save_changes(tableWidget=self.konica_tableWidget))
        self.gridLayout.addWidget(self.konica_save_changes_btn, 7, 4, 1, 1)

        # self.bzh36_btn = QtWidgets.QPushButton(self.konica_tab)
        # # self.bzh36_btn.setMaximumSize(QtCore.QSize(100, 16777215))
        # self.bzh36_btn.setObjectName("bzh36_btn")
        # self.bzh36_btn.clicked.connect(lambda: self.show_parts(tableWidget=self.konica_tableWidget, machine_id=4))
        # self.gridLayout.addWidget(self.bzh36_btn, 4, 0, 1, 1)

        self.konica_search_edit = QtWidgets.QLineEdit(self.konica_tab)
        self.konica_search_edit.setMaximumSize(QtCore.QSize(280, 16777215))
        self.konica_search_edit.setObjectName("konica_search_edit")
        self.konica_search_edit.setPlaceholderText("Αναζήτηση...")
        self.konica_search_edit.textChanged.connect(lambda: self.search(self.konica_search_edit))
        self.gridLayout.addWidget(self.konica_search_edit, 0, 2, 1, 1)

        # self.bzh282_btn = QtWidgets.QPushButton(self.konica_tab)
        # # self.bzh282_btn.setMaximumSize(QtCore.QSize(100, 16777215))
        # self.bzh282_btn.setObjectName("bzh282_btn")
        # self.bzh282_btn.clicked.connect(lambda: self.show_parts(tableWidget=self.konica_tableWidget, machine_id=3))
        # self.gridLayout.addWidget(self.bzh282_btn, 3, 0, 1, 1)

        self.konica_add_model_btn = QtWidgets.QPushButton(self.konica_tab)
        self.konica_add_model_btn.setStyleSheet("background-color: gray; color: white; max-height: 40px; "
                                                "border-top-right-radius: 20px; border-bottom-left-radius: 20px;")
        self.konica_add_model_btn.clicked.connect(self.add_model)
        self.konica_add_model_btn.setObjectName("konica_add_model_btn")
        self.gridLayout.addWidget(self.konica_add_model_btn, 7, 0, 1, 1)
        self.tabWidget.addTab(self.konica_tab, "Προϊόντα")

        self.basket_tab = QtWidgets.QWidget()
        self.basket_tab.setToolTip("")
        self.basket_tab.setStatusTip("")
        self.basket_tab.setWhatsThis("")
        self.basket_tab.setAccessibleName("")
        self.basket_tab.setAccessibleDescription("")
        self.basket_tab.setObjectName("basket_tab")

        self.gridLayout_4 = QtWidgets.QGridLayout(self.basket_tab)
        self.gridLayout_4.setObjectName("gridLayout_4")
        # Basket Table Widget
        self.basket_tableWidget = QtWidgets.QTableWidget(self.basket_tab)
        self.basket_tableWidget.setToolTip("")
        self.basket_tableWidget.setStatusTip("")
        self.basket_tableWidget.setWhatsThis("")
        self.basket_tableWidget.setAccessibleName("")
        self.basket_tableWidget.setAccessibleDescription("")
        self.basket_tableWidget.setAutoFillBackground(True)
        self.basket_tableWidget.setLocale(QtCore.QLocale(QtCore.QLocale.Greek, QtCore.QLocale.Greece))
        self.basket_tableWidget.setAlternatingRowColors(True)
        self.basket_tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.basket_tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.basket_tableWidget.setObjectName("basket_tableWidget")
        self.basket_tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.basket_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.basket_tableWidget.resizeRowsToContents()
        self.basket_tableWidget.setColumnCount(6)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("ID")
        self.basket_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Μηχάνημα")
        self.basket_tableWidget.setHorizontalHeaderItem(1, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Κωδικός")
        self.basket_tableWidget.setHorizontalHeaderItem(2, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Τιμή")
        self.basket_tableWidget.setHorizontalHeaderItem(3, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Τεμ.")
        self.basket_tableWidget.setHorizontalHeaderItem(4, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Σύνολο")
        self.basket_tableWidget.setHorizontalHeaderItem(5, item)

        self.gridLayout_4.addWidget(self.basket_tableWidget, 1, 1, 2, 4)

        self.order_btn = QtWidgets.QPushButton(self.basket_tab)
        self.order_btn.setStyleSheet("background-color: rgb(0, 0, 255);\n"
                                     "color: rgb(255, 255, 255);")
        self.order_btn.setObjectName("order_btn")
        self.order_btn.clicked.connect(lambda: self.make_order())
        self.gridLayout_4.addWidget(self.order_btn, 4, 4, 1, 1)

        self.delete_selected_btn = QtWidgets.QPushButton(self.basket_tab)
        self.delete_selected_btn.setStyleSheet("color: white; min-height: 40px; max-width: 120px; background-color: red")
        self.delete_selected_btn.setObjectName("delete_selected_btn")
        self.delete_selected_btn.clicked.connect(lambda: self.delete_basket_item())
        self.gridLayout_4.addWidget(self.delete_selected_btn, 0, 4, 1, 1)
        self.show_basket_btn = QtWidgets.QPushButton(self.basket_tab)
        self.show_basket_btn.setObjectName("show_basket_btn")
        self.show_basket_btn.setText("Εμφάνιση Ενημέρωση Καλαθιού")
        self.show_basket_btn.clicked.connect(lambda: self.show_basket())

        self.gridLayout_4.addWidget(self.show_basket_btn, 0, 1, 1, 1)
        self.search_basket_edit = QtWidgets.QLineEdit(self.basket_tab)
        self.search_basket_edit.setMaximumSize(QtCore.QSize(200, 16777215))
        self.search_basket_edit.setObjectName("search_basket_edit")
        self.search_basket_edit.setPlaceholderText("Αναζήτηση...")
        self.search_basket_edit.setStyleSheet("min-width: 250px; max-width:250px")
        self.search_basket_edit.textChanged.connect(lambda: self.search(self.search_basket_edit))
        self.gridLayout_4.addWidget(self.search_basket_edit, 0, 2, 1, 1)

        self.save_basket_btn = QtWidgets.QPushButton(self.basket_tab)
        self.save_basket_btn.setStyleSheet("background-color: rgb(0, 170, 0);\n"
                                           "color: rgb(255, 255, 255);")
        self.save_basket_btn.setObjectName("save_basket_btn")
        self.save_basket_btn.clicked.connect(lambda: self.save_changed_basket())
        self.gridLayout_4.addWidget(self.save_basket_btn, 4, 1, 1, 1)

        self.tabWidget.addTab(self.basket_tab, "")
        self.history_tab = QtWidgets.QWidget()
        self.history_tab.setObjectName("history_tab")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.history_tab)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.history_date_select_combobox = QtWidgets.QComboBox(self.history_tab)
        self.history_date_select_combobox.setObjectName("history_date_select_combobox")
        self.history_date_select_combobox.activated[str].connect(self.show_history)
        self.history_date_select_combobox.setStyleSheet(
            "color: rgb(255, 255, 255); min-height: 35px; font: 11pt; max-width: 200px; background-color: rgb(170, "
            "85, 0);\n")
        self.history_date_select_combobox.addItem('Ημερομηνία')
        self.history_date_select_combobox.addItems(get_orders_dates())

        self.gridLayout_5.addWidget(self.history_date_select_combobox, 2, 0, 1, 1)
        self.search_history_edit = QtWidgets.QLineEdit(self.history_tab)
        self.search_history_edit.setMaximumSize(QtCore.QSize(280, 16777215))
        self.search_history_edit.setObjectName("search_history_edit")
        self.search_history_edit.setPlaceholderText("Αναζήτηση...")
        self.search_history_edit.textChanged.connect(lambda: self.search(self.search_history_edit))
        # Adding Completer.
        self.completer = QCompleter(self.part_description)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        self.search_history_edit.setCompleter(self.completer)
        self.gridLayout_5.addWidget(self.search_history_edit, 2, 1, 1, 1)

        self.delete_selected_order = QtWidgets.QPushButton(self.history_tab)
        self.delete_selected_order.setStyleSheet(
            "color: white; min-height: 40px; max-width: 120px; background-color: red")
        self.delete_selected_order.setObjectName("delete_selected_btn")
        self.delete_selected_order.clicked.connect(lambda: self.delete_order_item())
        self.gridLayout_5.addWidget(self.delete_selected_order, 2, 3, 1, 1)

        # History Orders TableWidget
        self.history_tableWidget = QtWidgets.QTableWidget(self.history_tab)
        self.history_tableWidget.setMinimumSize(QtCore.QSize(600, 0))
        self.history_tableWidget.setToolTip("")
        self.history_tableWidget.setStatusTip("")
        self.history_tableWidget.setWhatsThis("")
        self.history_tableWidget.setAccessibleName("")
        self.history_tableWidget.setAccessibleDescription("")
        self.history_tableWidget.setAutoFillBackground(True)
        self.history_tableWidget.setLocale(QtCore.QLocale(QtCore.QLocale.Greek, QtCore.QLocale.Greece))
        self.history_tableWidget.setInputMethodHints(QtCore.Qt.ImhNone)
        self.history_tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.history_tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.history_tableWidget.setProperty("showDropIndicator", False)
        self.history_tableWidget.setDragDropOverwriteMode(False)
        self.history_tableWidget.setDragDropMode(QtWidgets.QAbstractItemView.NoDragDrop)
        self.history_tableWidget.setAlternatingRowColors(True)
        self.history_tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.history_tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.history_tableWidget.setObjectName("history_tableWidget")
        self.history_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.history_tableWidget.resizeRowsToContents()
        self.history_tableWidget.setColumnCount(7)
        # self.history_tableWidget.setRowCount(2)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("ID")
        self.history_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Μηχάνημα")
        self.history_tableWidget.setHorizontalHeaderItem(1, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Κωδικός")
        self.history_tableWidget.setHorizontalHeaderItem(2, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Προϊόν")
        self.history_tableWidget.setHorizontalHeaderItem(3, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Τεμ.")
        self.history_tableWidget.setHorizontalHeaderItem(4, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Τιμή")
        self.history_tableWidget.setHorizontalHeaderItem(5, item)

        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setText("Σύνολο")
        self.history_tableWidget.setHorizontalHeaderItem(6, item)

        self.save_order_btn = QtWidgets.QPushButton(self.history_tab)
        self.save_order_btn.setStyleSheet("background-color: rgb(0, 170, 0); min-height: 40px; color: rgb(255, 255, 255);")
        self.save_order_btn.setObjectName("save_basket_btn")
        self.save_order_btn.clicked.connect(lambda: self.save_changed_order())
        self.gridLayout_5.addWidget(self.save_order_btn, 4, 0, 1, 1)

        # self.history_tableWidget.horizontalHeader().setDefaultSectionSize(110)
        self.gridLayout_5.addWidget(self.history_tableWidget, 3, 0, 1, 4)
        self.tabWidget.addTab(self.history_tab, "")
        self.gridLayout_2.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1484, 34))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.menubar.addAction(self.menu.menuAction())
        self.statusBar = QStatusBar(MainWindow)
        self.statusBar.setObjectName(u"statusBar")
        self.statusBar.showMessage("Ετοιμο")
        MainWindow.setStatusBar(self.statusBar)
        self.statusBar.addPermanentWidget(self.progressBar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

        # Konica Table Widget
        self.konica_tableWidget.setSortingEnabled(False)
        item = self.konica_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.konica_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Τεμ."))
        item = self.konica_tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Ital-Κωδικός"))
        item = self.konica_tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Ital-Τιμή"))
        item = self.konica_tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Info-Κωδικός"))
        item = self.konica_tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Info-Τιμή"))
        item = self.konica_tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "Σύνολο"))
        __sortingEnabled = self.konica_tableWidget.isSortingEnabled()
        self.konica_tableWidget.setSortingEnabled(False)
        self.konica_tableWidget.setSortingEnabled(__sortingEnabled)
        self.konica_italia_price_btn.setText(_translate("MainWindow", "Εύρεση τιμών Ιταλία"))
        self.konica_add_product_btn.setText(_translate("MainWindow", "Προσθήκη Προϊόντος"))



        self.konica_info_price_btn.setText(_translate("MainWindow", "Εύρεση τιμών Info-copy"))
        self.konica_sent_to_basket_btn.setText(_translate("MainWindow", "Προσθήκη στο καλάθι"))
        self.konica_save_changes_btn.setText(_translate("MainWindow", "Αποθήκευση Αλλαγών"))
        self.konica_add_model_btn.setText(_translate("MainWindow", "Προσθήκη"))

        # Basket
        self.basket_tableWidget.setSortingEnabled(False)

        self.order_btn.setText(_translate("MainWindow", "Παραγγελία"))
        self.delete_selected_btn.setText(_translate("MainWindow", "Διαγραφή επιλογής"))
        self.save_basket_btn.setText(_translate("MainWindow", "Αποθήκευση Καλαθιού"))
        self.save_order_btn.setText(_translate("MainWindow", "Αποθήκευση Παραγγελίας"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.basket_tab), _translate("MainWindow", "ΚΑΛΑΘΙ"))

        self.delete_selected_order.setText(_translate("MainWindow", "Διαγραφή επιλογής"))
        # History
        self.history_tableWidget.setSortingEnabled(True)

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.history_tab), _translate("MainWindow", "ΙΣΤΟΡΙΚΟ"))
        self.menu.setTitle(_translate("MainWindow", "Αρχείο"))

    # Εμφάνηση ανταλλακτικών
    def show_parts(self, text):
        try:
            self.selected_tableWidget = self.konica_tableWidget
            machine_obj = Ital_Session.query(Machine).filter(Machine.model == text).one_or_none()

            machine_id = machine_obj.ID
            data_to_show = get_spare_parts(machine_id)
            machine_model = machine_obj.model

            self.konica_model_label.setText(machine_model)
            # Πρώτα αδειάζουμε τον πίνακα
            self.selected_tableWidget.clearContents()
            self.selected_tableWidget.setRowCount(len(data_to_show))

            for row, data in enumerate(data_to_show):
                _id = QTableWidgetItem(data.ID)
                _id.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                _id.setData(Qt.DisplayRole, int(data.ID))
                self.selected_tableWidget.setItem(row, 0, _id)

                self.selected_tableWidget.setVerticalHeaderItem(row, QTableWidgetItem(f'{data.description}'))
                self.part_description.append(data.description)

                part_nr = QTableWidgetItem(str(data.part_nr))
                self.selected_tableWidget.setItem(row, 1, part_nr)

                ml_code = QTableWidgetItem(str(data.ml_code))
                self.selected_tableWidget.setItem(row, 2, ml_code)

                pieces = ml_sql.get_ml_db_pieces(machine_model=machine_obj.model, ml_code=ml_code.text())

                if pieces is None:
                    pieces = 0
                ml_pieces = QTableWidgetItem(str(pieces))
                self.selected_tableWidget.setItem(row, 3, ml_pieces)

                ital_code = QTableWidgetItem(str(data.ital_code))
                self.selected_tableWidget.setItem(row, 4, ital_code)

                ital_price = QTableWidgetItem(str(data.ital_price))
                self.selected_tableWidget.setItem(row, 5, ital_price)

                info_code = QTableWidgetItem(str(data.info_code))
                self.selected_tableWidget.setItem(row, 6, info_code)

                info_price = QTableWidgetItem(str(data.info_price))
                self.selected_tableWidget.setItem(row, 7, info_price)

                info_site_code = QTableWidgetItem(str(data.info_site_code))
                self.selected_tableWidget.setItem(row, 8, info_site_code)
            # Αποκόμηση ημερομηνίας τελευταίας ενημέρωσης τιμών
            prices_date = get_prices_date(machine_id)
            self.statusBar.showMessage(f"Τελευταια ενημέρωση τιμών : {prices_date}")
        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())

    def save_changes(self, tableWidget=None):
        try:
            self.selected_tableWidget = tableWidget
            rows = self.selected_tableWidget.rowCount()
            spare_parts_ids = []
            for row in range(0, rows):
                spare_part_object = self.selected_tableWidget.item(row, 0)
                spare_part_id = spare_part_object.text()
                spare_part_dic = {"ID": spare_part_id}

                part_nr_object = self.selected_tableWidget.item(row, 1)
                part_nr = part_nr_object.text()
                spare_part_dic["part_nr"] = part_nr

                ml_code_object = self.selected_tableWidget.item(row, 2)
                ml_code = ml_code_object.text()
                spare_part_dic["ml_code"] = ml_code

                ital_code_object = self.selected_tableWidget.item(row, 4)
                ital_code = ital_code_object.text()
                spare_part_dic["ital_code"] = ital_code

                ital_price_object = self.selected_tableWidget.item(row, 5)
                ital_price = ital_price_object.text()
                spare_part_dic["ital_price"] = ital_price

                info_code_object = self.selected_tableWidget.item(row, 6)
                info_code = info_code_object.text()
                spare_part_dic["info_code"] = info_code

                info_price_object = self.selected_tableWidget.item(row, 7)
                info_price = info_price_object.text()
                spare_part_dic["info_price"] = info_price

                info_site_code_object = self.selected_tableWidget.item(row, 8)
                info_site_code = info_site_code_object.text()
                spare_part_dic["info_site_code"] = info_site_code

                spare_parts_ids.append(spare_part_dic)

            done = save_prices(spare_parts_ids)
            if done:
                msgBox = QMessageBox.information(None, "Πληροφορία", "Η αποθήκευση ολοκληρώθηκε")
            else:
                msgBox = QMessageBox.critical(None, "Σφάλμα", "Κάτι δεν πήγε καλά")
        except AttributeError:
            msgBox = QMessageBox.critical(None, "Σφάλμα", "Τίποτα προς αποθήκευση")
        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())

    def update_ital_prices(self):
        self.progressBar.show()
        self.progressBar.setStyleSheet(u"background-color: rgb(170, 255, 0);")
        try:

            rows = self.selected_tableWidget.rowCount()
            # Ελεγχος αν ο χρήστης έχει πατήση για ενημέρωση συνόλου
            # δηλαδη αν η τελευταια γραμμή ειναι το τελικο σύνολο
            # self.selected_tableWidget.item(rows-1, 0) ειναι το πεδίο ID
            if self.selected_tableWidget.item(rows-1, 0) is None:
                rows -= 1

            # ProgressBar
            self.progressBar.setStyleSheet(u"background-color: rgb(170, 255, 0);")
            self.progressBar.setMaximum(rows - 1)
            for row in range(0, rows):
                spare_part_object = self.selected_tableWidget.item(row, 0)
                spare_part_id = spare_part_object.text()

                ital_code_object = self.selected_tableWidget.item(row, 4)
                ital_code = ital_code_object.text()
                self.statusBar.showMessage(f"Ευρεση τιμής Ιταλίας για κωδικό: {ital_code}")
                if ital_code != "0":
                    # Να το αδειασουμε πρωτα για να φαινεται οτι περνει απο το internet
                    ital_price = QTableWidgetItem(str(""))
                    self.selected_tableWidget.setItem(row, 5, ital_price)
                    ital_price = get_ital_price(ital_code) + " €"
                else:
                    ital_price = 0
                self.progressBar.setValue(row)
                ital_price = QTableWidgetItem(str(ital_price).replace(",", "."))
                self.selected_tableWidget.setItem(row, 5, ital_price)
            msgBox = QMessageBox.information(None, "Πληροφορία", "Η αποκόμιση τιμών ήταν επιτυχής")
        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())
        finally:
            self.progressBar.hide()

    def update_info_prices(self):
        try:
            self.progressBar.show()
            rows = self.selected_tableWidget.rowCount()
            # Ελεγχος αν ο χρήστης έχει πατήση για ενημέρωση συνόλου
            # δηλαδη αν η τελευταια γραμμή ειναι το τελικο σύνολο
            # self.selected_tableWidget.item(rows-1, 0) ειναι το πεδίο ID
            if self.selected_tableWidget.item(rows - 1, 0) is None:
                rows -= 1

            # ProgressBar
            self.progressBar.setStyleSheet(u"background-color: rgb(170, 255, 0);")
            self.progressBar.setMaximum(rows - 1)
            for row in range(0, rows):
                spare_part_object = self.selected_tableWidget.item(row, 0)
                spare_part_id = spare_part_object.text()

                info_site_code_object = self.selected_tableWidget.item(row, 8)
                info_site_code = info_site_code_object.text()

                info_code_object = self.selected_tableWidget.item(row, 6)
                info_code = info_code_object.text()

                self.statusBar.showMessage(f"Ευρεση τιμής Info-Copy για κωδικό: {info_code}")
                if info_site_code != "0" or info_site_code != "" or info_site_code is not None:
                    info_price = get_info_price(info_site_code)

                else:
                    info_price = 0
                self.progressBar.setValue(row)
                info_price = QTableWidgetItem(str(info_price))
                self.selected_tableWidget.setItem(row, 7, info_price)
            msgBox = QMessageBox.information(None, "Πληροφορία", "Η αποκόμιση τιμών ήταν επιτυχής")
        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα...", f"{traceback.print_exc()}")
            print(traceback.print_exc())
        finally:
            self.progressBar.hide()

    def search(self, search_edit):

        try:
            items = self.selected_tableWidget.findItems(search_edit.text(), Qt.MatchContains)

            if items:  # we have found something
                self.selected_tableWidget.setStyleSheet(u"selection-color: rgb(255, 0, 0);")
                self.selected_tableWidget.setStyleSheet(u"selection-background-color: rgb(85, 170, 255)")
                # Επιλογή κουτακιού οταν βρεθη αυτο που ψαχνουμε
                self.selected_tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
                item = items[0]  # take the first
                self.selected_tableWidget.setCurrentCell(item.row(), item.column())
            # Επαναφορα επηλογής γραμμης και οχι κουτακιου
            # self.selected_tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectColumns)
        except AttributeError:
            # AttributeError: 'NoneType' object has no attribute 'findItems'
            # Οταν δεν έχουμε επιλέξει πίνακα
            pass

    def calc_total(self):
        overall_total = []
        try:
            rows = self.selected_tableWidget.rowCount()
        except AttributeError:
            # Οταν δεν έχουμε διαλέξη πίνακα και παταμε υπολογισμό συνόλου
            return

        for row in range(0, rows):
            try:
                price_object = self.selected_tableWidget.item(row, 5)
                price = price_object.text().replace(" €", "").replace(",", ".")

                pieces_object = self.selected_tableWidget.item(row, 9)
                pieces = pieces_object.text()
                # Αν σβήσουμε τα τεμάχια και το αφήσουμε κενό
                if pieces == "":
                    pieces = 0

                total = float("{:.2f}".format(float(price) * float(pieces)))
                overall_total.append(total)

                total = QTableWidgetItem(str(str(total) + " €"))
                total.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                self.selected_tableWidget.setItem(row, 10, total)
            except AttributeError:
                # Αν δεν υπάρχει τιμή ή δεν εχουμε βάλει τεμαχια τοτε βγαζει AttributeError
                # γιατι το pieces_object = self.selected_tableWidget.item(row, 8) Επιστρέφει None
                pass  # Για να πάει στην επωμενη γραμμη -- row
            except ValueError:
                # total = float("{:.2f}".format(float(price) * float(pieces)))
                # ValueError: could not convert string to float: 'PGUMM0013QSZZ'
                pass

        overall_total_item = QTableWidgetItem(str("{:.2f}".format(sum(overall_total))) + " €")
        overall_total_item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        # Προσθήκη νεας γραμμής και ελεγχος αν υπάρχει το τελικό σύνολο

        last_vertical_header = self.selected_tableWidget.verticalHeaderItem(rows - 1)

        if last_vertical_header.text() != "Τελικό σύνολο":
            self.selected_tableWidget.setRowCount(rows + 1)
            self.selected_tableWidget.setVerticalHeaderItem(++rows, QTableWidgetItem('Τελικό σύνολο'))
            self.selected_tableWidget.setItem(++rows, 10, overall_total_item)
            self.selected_tableWidget.item(++rows, 10).setBackground(QtGui.QColor("red"))
            self.selected_tableWidget.item(++rows, 10).setForeground(QtGui.QColor("white"))
        else:
            self.selected_tableWidget.setItem(rows-1, 10, overall_total_item)
            self.selected_tableWidget.item(rows-1, 10).setBackground(QtGui.QColor("red"))
            self.selected_tableWidget.item(rows-1, 10).setForeground(QtGui.QColor("white"))

    def send_to_basket(self):
        # Πρώτα να εμφανίζει το τελικό σύνολο για να υπολογίσω πιο ευκολα της γραμμές χωρίς την τελευταια γραμμη
        # διαφορετικα θα πρεπει να ελέγχο αν εχει πατήση ο χρήστης υπολογισμος τελικου συνόλου
        # αν εχει πατήση πρεπει να αφερω την τελευταία γραμμή αν όχι δεν πρεπει να την αφερώ
        # ενω αν τρέχω απο εδό το τελικο σύνολο την αφαιρώ και τελος
        self.calc_total()
        items = []
        try:
            rows = self.selected_tableWidget.rowCount()
            for row in range(0, rows-1):  # -1 Για να μήν έχω το τελικό σύνολο

                pieces_object = self.selected_tableWidget.item(row, 9)
                # Οταν το σβήνουμε περενει τιμή "" κενο str
                if not pieces_object or pieces_object.text() == "":
                    continue
                else:
                    pieces = pieces_object.text()
                    spare_part_object = self.selected_tableWidget.item(row, 0)
                    spare_part_id = spare_part_object.text()
                    exist = save_to_basket(part_id=spare_part_id, pieces=pieces)
                    if exist:
                        msgBox = QMessageBox.information(None, "Πληροφορία", f"{exist}")
                        continue
                    items.append(pieces)
            # Ελεγχος αν έχει τεμάχια
            if len(items) == 0:
                raise AttributeError

            msgBox = QMessageBox.information(None, "Πληροφορία", "Η αποθήκευση ολοκληρώθηκε")
        except ValueError:
            msgBox = QMessageBox.critical(None, "Σφάλμα", "Παρακαλώ στο πεδίο Τεμ. να είναι αριθμός")
            return
        except AttributeError:
            msgBox = QMessageBox.critical(None, "Σφάλμα", "Παρακαλώ ορίστε τουλάχιστον ένα τεμάχιο")
            return
        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())
            return

# Εμφάνηση Καλαθιού
    def show_basket(self):
        data_to_show = get_basket()
        overall_total = []
        self.selected_tableWidget = self.basket_tableWidget
        try:

            # Πρώτα αδειάζουμε τον πίνακα
            self.basket_tableWidget.clearContents()
            self.basket_tableWidget.setRowCount(len(data_to_show))

            for row, data in enumerate(data_to_show):
                _id = QTableWidgetItem(data.ID)
                _id.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                _id.setData(Qt.DisplayRole, int(data.ID))

                self.basket_tableWidget.setItem(row, 0, _id)

                self.basket_tableWidget.setVerticalHeaderItem(row, QTableWidgetItem(f'{data.spare_part_ref.description}'))
                self.part_description.append(data.spare_part_ref.description)
                machine = QTableWidgetItem(str(data.machine_ref))
                machine.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                self.basket_tableWidget.setItem(row, 1, machine)

                ml_code = QTableWidgetItem(str(data.ml_code))
                ml_code.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                self.basket_tableWidget.setItem(row, 2, ml_code)

                pieces = QTableWidgetItem(str(data.pieces))
                self.basket_tableWidget.setItem(row, 4, pieces)

                price = QTableWidgetItem(str(data.price) + " €")
                self.basket_tableWidget.setItem(row, 3, price)

                total = QTableWidgetItem(str(data.total) + " €")
                total.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)

                self.basket_tableWidget.setItem(row, 5, total)
                overall_total.append(float(data.total))

            # Προσθήκη νεας γραμμής για τελικό σύνολο
            rows = self.basket_tableWidget.rowCount()
            overall_total_item = QTableWidgetItem(str("{:.2f}".format(sum(overall_total))) + " €")
            self.basket_tableWidget.setRowCount(rows + 1)
            self.basket_tableWidget.setVerticalHeaderItem(++rows, QTableWidgetItem('Τελικό σύνολο'))
            self.basket_tableWidget.setItem(++rows, 5, overall_total_item)
            self.basket_tableWidget.item(++rows, 5).setBackground(QtGui.QColor("red"))
            self.basket_tableWidget.item(++rows, 5).setForeground(QtGui.QColor("white"))

        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())

    # Διαγραφή γραμμών απο το καλάθι
    def delete_basket_item(self):
        try:
            self.selected_tableWidget = self.basket_tableWidget
            selected_row = self.basket_tableWidget.selectionModel().selectedRows()
            self.basket_tableWidget.removeRow(selected_row[0].row())
            self.basket_tableWidget.clearSelection()
        except IndexError:
            # αν δεν έχουμε επιλέξη καμία γραμμη
            msg = QMessageBox.information(None, "Πληροφρορία", "Παρακαλώ επιλέξτε γραμμή για διαγραφή")
            return

    # Αποθήκευση αλλαγών καλαθιού
    def save_changed_basket(self):
        try:
            items_to_save = []
            items_ids = []
            rows = self.selected_tableWidget.rowCount()
            for row in range(0, rows-1):  # -1 Για να μήν έχω το τελικό σύνολο

                item_id = self.selected_tableWidget.item(row, 0)
                item_dic = {"ID": item_id.text()}
                items_ids.append(int(item_id.text()))

                ml_code = self.selected_tableWidget.item(row, 2)
                item_dic["ml_code"] = ml_code.text()
                price = self.selected_tableWidget.item(row, 3)
                item_dic["price"] = price.text().replace(",", ".").replace(" €", "")

                pieces = self.selected_tableWidget.item(row, 4)
                item_dic["pieces"] = pieces.text().replace(" €", "")

                total = "{:.2f}".format(float(price.text().replace(" €", "").replace(",", ".")) * float(pieces.text()))
                item_dic["total"] = total
                items_to_save.append(item_dic)

            done = save_basket(items_to_save=items_to_save, items_ids=items_ids)
            if done:
                self.show_basket()
                msgBox = QMessageBox.information(None, "Πληροφορία", "Το καλάθι αποθηκεύτηκε")

            else:
                msgBox = QMessageBox.critical(None, "Σφάλμα", "Κάτι δεν πήγε καλά")
                self.show_basket()
        except ValueError:
            msgBox = QMessageBox.critical(None, "Σφάλμα", "Παρακαλώ στο πεδίο Τεμ. να είναι αριθμός")
            return
        except AttributeError:
            msgBox = QMessageBox.critical(None, "Σφάλμα", "Το καλάθι είναι άδειο")
            return
        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())
            return

    def make_order(self):
        msg = save_order()
        if msg:
            msg = QMessageBox.information(None, "Πληροφρορία", "Η παραγγελία ολοκληρώθηκε")
            self.show_basket()
            # Ενημέρωση Qcombobox
            self.history_date_select_combobox.clear()
            self.history_date_select_combobox.addItem('Ημερομηνία')
            self.history_date_select_combobox.addItems(get_orders_dates())
        else:
            msg = QMessageBox.critical(None, "Σφάλμα", f"{msg}")

    def show_history(self, text):
        self.selected_date_to_show = text
        data_to_show = get_history(selected_date=text)
        overall_total = []
        self.selected_tableWidget = self.history_tableWidget
        try:
            # Πρώτα αδειάζουμε τον πίνακα
            self.history_tableWidget.clearContents()
            self.history_tableWidget.setRowCount(0) # Θέλει πρώτα μηδέν γιατι  κατι παιζει με τa verticalheader
            self.history_tableWidget.setRowCount(len(data_to_show))

            for row, data in enumerate(data_to_show):
                _id = QTableWidgetItem(data.ID)
                _id.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                _id.setData(Qt.DisplayRole, int(data.ID))

                self.history_tableWidget.setItem(row, 0, _id)

                machine = QTableWidgetItem(str(data.machine_ref))
                machine.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                self.history_tableWidget.setItem(row, 1, machine)

                ml_code = QTableWidgetItem(str(data.spare_part_ref.ml_code))
                self.history_tableWidget.setItem(row, 2, ml_code)

                spare_part = QTableWidgetItem(str(data.spare_part_ref.description))
                self.part_description.append(data.spare_part_ref.description)

                self.history_tableWidget.setItem(row, 3, spare_part)

                pieces = QTableWidgetItem(str(data.pieces))
                self.history_tableWidget.setItem(row, 4, pieces)

                price = QTableWidgetItem(str(data.price) + " €")
                self.history_tableWidget.setItem(row, 5, price)

                total = QTableWidgetItem(str(data.total) + " €")
                total.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)

                self.history_tableWidget.setItem(row, 6, total)
                overall_total.append(float(data.total))

            # Προσθήκη νεας γραμμής για τελικό σύνολο
            rows = self.history_tableWidget.rowCount()
            overall_total_item = QTableWidgetItem(str("{:.2f}".format(sum(overall_total))) + " €")
            self.history_tableWidget.setRowCount(rows + 1)
            self.history_tableWidget.setVerticalHeaderItem(++rows, QTableWidgetItem('Τελικό σύνολο'))
            self.history_tableWidget.setItem(++rows, 6, overall_total_item)
            self.history_tableWidget.item(++rows, 6).setBackground(QtGui.QColor("red"))
            self.history_tableWidget.item(++rows, 6).setForeground(QtGui.QColor("white"))

        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())

    def delete_order_item(self):
        try:
            self.selected_tableWidget = self.history_tableWidget
            selected_row = self.history_tableWidget.selectionModel().selectedRows()
            self.history_tableWidget.removeRow(selected_row[0].row())
            self.history_tableWidget.clearSelection()
        except IndexError:
            # αν δεν έχουμε επιλέξη καμία γραμμη
            msg = QMessageBox.information(None, "Πληροφρορία", "Παρακαλώ επιλέξτε γραμμή για διαγραφή")
            return

    # Αποθήκευση αλλαγών καλαθιού
    def save_changed_order(self):
        try:
            items_to_save = []
            items_ids = []
            rows = self.selected_tableWidget.rowCount()
            for row in range(0, rows - 1):  # -1 Για να μήν έχω το τελικό σύνολο

                item_id = self.selected_tableWidget.item(row, 0)
                items_ids.append(int(item_id.text()))

            done = make_changed_order(items_to_save=items_ids)
            if done:
                self.show_history(self.selected_date_to_show)
                msgBox = QMessageBox.information(None, "Πληροφορία", "Η παραγγελία αποθηκεύτηκε")
            else:
                msgBox = QMessageBox.critical(None, "Σφάλμα", "Κάτι δεν πήγε καλά")
                self.show_history(self.selected_date_to_show)

        except AttributeError:
            msgBox = QMessageBox.critical(None, "Σφάλμα", "Η παραγγελία είναι άδεια")
            return
        except Exception:
            msgBox = QMessageBox.critical(None, "Σφάλμα", f"{traceback.print_exc()}")
            print(traceback.print_exc())
            return

    def insert_spare_part(self):
        self.add_spare_part_window = QWidget()
        # self.add_spare_part_window = QMainWindow(parent=None)
        add_spare_part = Ui_add_spare_part_QWidget()
        add_spare_part.setupUi(self.add_spare_part_window)
        self.add_spare_part_window.show()

    def add_model(self):
        self.add_model_window = QWidget()
        # self.add_spare_part_window = QMainWindow(parent=None)
        add_model = Ui_add_model_QWidget()
        add_model.setupUi(self.add_model_window)
        self.add_model_window.show()

    def update_machines(self):
        self.machine_comboBox.clear()
        self.machine_comboBox.addItems(get_machines_id())

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("Fusion")
    app.setStyleSheet("QPushButton {max-height: 40px; min-width: 180px; max-width:200;"
                      "border-top-right-radius: 20px; border-bottom-left-radius: 20px; background-color: #ff9800;}"
                      "QPushButton:enabled { background-color: #55aa7f; color: white; }")
    # app.setFont(f)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
